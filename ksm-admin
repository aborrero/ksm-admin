#!/bin/bash

# Author: Arturo Borrero Gonzalez { aborrero@cica.es || arturo.borrero.glez@gmail.com }
# http://ral-arturo.blogspot.com/
#
# Licensed under GPL license, readable at: http://www.gnu.org/copyleft/gpl.html


### Use:
# ksm-admin {start|stop|status {[-f]|[-s]}|flush|millisecs m|scan p|help}
### Return codes:
# Failure: 1
# Success: 0
# Bad arguments: 3
# ksm-admin status -s (KSM not running): 2
# ksm-admin status -s (KSM running): 0


# KSM related doc:
# http://www.mjmwired.net/kernel/Documentation/vm/ksm.txt
# Also Proxmox and RedHat's virtualization documentation.

################################################################
# Variable declarations

THIS="/usr/sbin/ksm-admin"
VERSION="0.3"

# Change this for using in different OS.
UNAME="/bin/uname"
CAT="/bin/cat"
WATCH="/usr/bin/watch"
BASH="/bin/bash"
GREP="/bin/grep"
AWK="/usr/bin/awk"
FREE="/usr/bin/free"
GETCONF="/usr/bin/getconf"
PS="/bin/ps"

# Change this if KSM implementation also changes
KSM_PATH="/sys/kernel/mm/ksm"
KSM_RUN="$KSM_PATH/run"
KSM_PAGES_SHARED="$KSM_PATH/pages_shared"
KSM_PAGES_SHARING="$KSM_PATH/pages_sharing"
KSM_PAGES_UNSHARED="$KSM_PATH/pages_unshared"
KSM_FULL_SCANS="$KSM_PATH/full_scans"
KSM_SLEEP="$KSM_PATH/sleep_millisecs"
KSM_MAX_KERNEL_PAGES="$KSM_PATH/max_kernel_pages"
KSM_PAGES_TO_SCAN="$KSM_PATH/pages_to_scan"
KSM_VOLATILE="$KSM_PATH/pages_volatile"

# Color codes
C_NORMAL="\E[0m"
C_BOLD="\E[1m"


################################################################
# Functions declarations

# int required_bins()
# used to check all binaries
function required_bins()
{
	local required_bins_retval=0

	# Test all binary needed by this script. This is because from one OS to other, some PATH may vary.
	[ ! -x $UNAME ] && { required_bins_retval=1 ; echo "E: The [${UNAME}] binary has not execution permission or was not found." >&2 ; }
	[ ! -x $CAT ] && { required_bins_retval=1 ; echo "E: The [${CAT}] binary has not execution permission or was not found." >&2 ; }
	[ ! -x $WATCH ] && { required_bins_retval=1 ; echo "E: The [${WATCH}] binary has not execution permission or was not found." >&2 ; }
	[ ! -x $BASH ] && { required_bins_retval=1 ; echo "E: The [${BASH}] binary has not execution permission or was not found." >&2 ; }
	[ ! -x $GREP ] && { required_bins_retval=1 ; echo "E: The [${GREP}] binary has not execution permission or was not found." >&2 ; }
	[ ! -x $AWK ] && { required_bins_retval=1 ; echo "E: The [${AWK}] binary has not execution permission or was not found." >&2 ; }
	[ ! -x $FREE ] && { required_bins_retval=1 ; echo "E: The [${FREE}] binary has not execution permission or was not found." >&2 ; }
	[ ! -x $PS ] && { required_bins_retval=1 ; echo "E: The [${PS}] binary has not execution permission or was not found." >&2 ; }

	return $required_bins_retval
}

# int files_exist()
# used to know if any KSM related file is missing
function files_exist()
{
	local retval=0
	[ ! -d $KSM_PATH ] && { retval=1 ; echo  "E: Directory $KSM_PATH not found." >&2 ; }
	[ ! -r $KSM_RUN ] && { retval=1 ; echo "W: File $KSM_RUN not found." >&2 ; }
	[ ! -r $KSM_PAGES_SHARING ] && { retval=1 ; echo "W: File $KSM_PAGES_SHARING not found." >&2 ; }
	[ ! -r $KSM_PAGES_UNSHARED ] && { retval=1 ; echo "W: File $KSM_PAGES_UNSHARED not found." >&2 ; }
	[ ! -r $KSM_FULL_SCANS ] && { retval=1 ; echo "W: File $KSM_FULL_SCANS not found." >&2 ; }
	[ ! -r $KSM_SLEEP ] && { retval=1 ; echo "W: File $KSM_SLEEP not found." >&2 ; }
	[ ! -r $KSM_MAX_KERNEL_PAGES ] && { retval=1 ; echo "W: File $KSM_MAX_KERNEL_PAGES not found." >&2 ; }
	[ ! -r $KSM_PAGES_TO_SCAN ] && { retval=1 ; echo "W: File $KSM_PAGES_TO_SCAN not found." >&2 ; }
	[ ! -r $KSM_VOLATILE ] && { retval=1 ; echo "W: File $KSM_VOLATILE not found." >&2 ; }

	return $retval
}

# int has_support()
# used to know if this kernel has KSM support
function has_support()
{
	local retval=1
	$GREP "CONFIG_KSM=y" /boot/config-`$UNAME -r` 2> /dev/null > /dev/null
	if [ $? -eq 0 ]
	then
		retval=0
	fi

	return $retval
}

# int is_running()
# used to know the state of KSM
function is_running()
{
	[ ! -r $KSM_RUN ] && return 1
	return `$CAT $KSM_RUN`
}

# int is_ksm_effective()
# used to know if ksm if being effective
function is_ksm_efective()
{
	# As seen in some documentation  Q(-_-Q)
	local retval=0
	if [ "`$CAT $KSM_PAGES_SHARING`" -gt "`$CAT $KSM_PAGES_SHARED`" ] 2> /dev/null || [ "`$CAT $KSM_PAGES_SHARING`" -eq "`$CAT $KSM_PAGES_SHARED`" ] 2> /dev/null
	then
		# yes, is effective.
		retval=1
	fi
	if [ "`$CAT $KSM_PAGES_UNSHARED`" -gt "`$CAT $KSM_PAGES_SHARING`" ] 2> /dev/null || [ "`$CAT $KSM_PAGES_UNSHARED`" -eq "`$CAT $KSM_PAGES_SHARING`" ] 2> /dev/null
	then
		# those parameters indicates that is not effective, despite previous check.
		retval=0
	fi
	return $retval
}

# int get_ksm_cpu_usage()
# used to calculate the actual ksmd cpu usage
function get_ksm_cpu_usage()
{
	# I obtain it from ps
	local usage=`$PS aux 2>/dev/null | grep "\[ksmd\]" 2>/dev/null | awk -F' ' '{print $3}' 2>/dev/null`
	if [ ! -z "$usage" ] && [[ $usage =~ ^[0-9]+"."?([0-9]+)?$ ]]
	then
		echo "$usage" # return if valid data
	else
		echo "no data" # return this otherwise
	fi
	return 0
}

# int ram_usage()
# caculate the ram usage percentage of the system
function ram_usage()
{
	local total_ram=`$FREE | $GREP -i "Mem:" | $AWK -F' ' '{print $2}'`
	local used_ram=`$FREE | $GREP -i "Mem:" | $AWK -F' ' '{print $3}'`
	if [ $total_ram -ne 0 ] && [[ $total_ram =~ ^[0-9]+$ ]] && [[ $used_ram =~ ^[0-9]+$ ]]
	then
		# the real return
		echo -- | $AWK "{print $used_ram / $total_ram * 100}"
	else
		# the real return
		echo "no data"
	fi
	return 0
}

# int swap_usage()
# calculate the swap usage percentage of the system
function swap_usage()
{
	local total_swap=`$FREE | $GREP -i "Swap:" | $AWK -F' ' '{print $2}'`
	local used_swap=`$FREE | $GREP -i "Swap:" | $AWK -F' ' '{print $3}'`
	if [ $total_swap -ne 0 ] && [[ $total_swap =~ ^[0-9]+$ ]] && [[ $used_swap =~ ^[0-9]+$ ]]
	then
		# the real return
		echo -- | $AWK "{print $used_swap / $total_swap * 100}"
	else
		# the real return
		echo "no data"
	fi
	return 0
}

# void status()
# print the status of KSM
function status()
{
	echo -e "${C_BOLD}--------------------------------------------${C_NORMAL}"
	echo -e "KSM status ${C_BOLD}|${C_NORMAL} `date`"
	echo -e "${C_BOLD}--------------------------------------------${C_NORMAL}"
	echo -n "- Running: "
	is_running
	if [ $? -eq 1 ]
	then
		echo -e "${C_BOLD}yes${C_NORMAL}"
	else
		echo -e "${C_BOLD}no${C_NORMAL}"
	fi
	# I'm working on this:
	# echo -n "- KSM actual CPU usage [%]: "
	# get_ksm_cpu_usage
	echo "- Pages shared: `$CAT $KSM_PAGES_SHARED 2> /dev/null || echo no data`"
	echo "- Pages sharing: `$CAT $KSM_PAGES_SHARING 2> /dev/null || echo no data`"
	echo "- Pages unshared: `$CAT $KSM_PAGES_UNSHARED 2> /dev/null || echo no data`"
	echo "- Full scans: `$CAT $KSM_FULL_SCANS 2> /dev/null || echo no data`"
	echo "- Sleep millisecs: `$CAT $KSM_SLEEP 2> /dev/null || echo no data`"
	echo "- Max kernel pages: `$CAT $KSM_MAX_KERNEL_PAGES 2> /dev/null || echo no data`"
	echo "- Pages to scan: `$CAT $KSM_PAGES_TO_SCAN 2> /dev/null || echo no data`"
	echo "- Pages volatile: `$CAT $KSM_VOLATILE 2> /dev/null || echo no data`"
	echo -n "- Kernel page size: "
	print_data `$GETCONF PAGESIZE 2>/dev/null`
	echo -e "${C_BOLD}--------------------------------------------${C_NORMAL}"
	echo "Resume:"
	echo -e "${C_BOLD}--------------------------------------------${C_NORMAL}"
	is_ksm_efective
	if [ $? -eq 1 ]
	then
		echo -n "- KSM seems effective."
		is_running
		if [ $? -eq 1 ]
		then
			echo ""
		else
			echo " But not running."
		fi
	else
		is_running
		if [ $? -eq 1 ]
		then
			echo "- By now it seems that KSM is wasting effort."
		else
			echo "- No data about KSM usefullness. Not running."
		fi
	fi
	echo -n "- Saving memory: "
	local saving_mem=$( saving_memory )
	print_data $saving_mem
	echo -n "- System RAM usage [%]: "
	ram_usage
	echo -n "- System SWAP usage [%]: "
	swap_usage

	return 0
}

# int stop()
# stops KSM
function stop()
{
	[ ! -w $KSM_RUN ] && { echo "E: No write permission in $KSM_RUN." >&2 ; return 1 ; }
	echo 0 > $KSM_RUN
	return $?
}

# int start()
# starts KSM
function start()
{
	local retval=1

	[ ! -w $KSM_RUN ] && { echo "E: No write permission in $KSM_RUN." >&2 ; return 1 ; }

	echo 1 > $KSM_RUN

	is_running
	if [ $? -eq 1 ]
	then
		retval=0
	fi
	return $retval
}

# int flush()
# flush KSM
function flush()
{
	[ ! -w $KSM_RUN ] && { echo "E: No write permission in $KSM_RUN." >&2 ; return 1 ; }
	echo 2 > $KSM_RUN
	return $?
}

# int millisecs(int millisecs)
# set the millisecs parameter to KSM
function millisecs()
{
	[ ! -w $KSM_SLEEP ] && { echo "E: No write permission in $KSM_SLEEP." >&2 ; return 1 ; }
	local retval=0

	# Validating parameter: a possitive integer
	if [[ $1 =~ ^[0-9]*$ ]] 2> /dev/null
	then
		echo $1 > $KSM_SLEEP
		retval=$?
	else
		echo "E: millisecs, invalid value. An integer >= 0 is needed." >&2
		retval=1
	fi

	return $retval
}

# int scan(int scan)
# set the scan parameter to KSM
function scan()
{
	[ ! -w $KSM_PAGES_TO_SCAN ] && { echo "E: No write permission to $KSM_PAGES_TO_SCAN." >&2 ; return 1 ; }

	local retval=0

	# Validating parameter: a possitive integer
	if [[ $1 =~ ^[0-9]*$ ]] 2> /dev/null
	then
		echo $1 > $KSM_PAGES_TO_SCAN
		retval=$?
	else
		echo "E: scan, invalid value. An integer >= 0 is needed." >&2
		retval=1
	fi

	return $retval
}

# int saving_memory()
# return the amount of saving memory due to KSM
function saving_memory()
{
	local retval=0
	local pagesize=`$GETCONF PAGESIZE 2>/dev/null || echo 0`
	local pages_sharing=`$CAT $KSM_PAGES_SHARING 2>/dev/null || echo 0`
	echo $(( pagesize * pages_sharing )) # this is the real return
	return $retval
}

# void print_bytes_count(int bytecount)
# Used to print bytes count in a human-readable way
function print_bytes_count()
{
        local arg0=$1
        [ $arg0 -ge 9663676416 ] && { echo "$(( arg0 / 1073741824 )) GB" ; return 0 ; }
        [ $arg0 -ge 9437184 ] && { echo "$(( arg0 /  1048576 )) MB" ; return 0 ; }
        [ $1 -ge 9216 ] && { echo "$(( arg0 /  1024 )) KB" ; return 0 ; }
        echo "$arg0 B"

        return 0
}

# void print_data(int[] data)
# Used to validate and print data to user
function print_data()
{
        if [ ! -z "$1" ] && [[ $1 =~ ^[0-9]+$ ]]
        then
                print_bytes_count $1
        else
                echo "no data"
        fi
        return 0
}


# void use()
# print usage information
function use()
{
	echo "Usage: ksm-admin {start|stop|status {[-f]|[-s]}|flush|millisecs m|scan p|help}"
	return 0
}

# void help()
# print help information
function help()
{
	use
	echo "Version: $VERSION"
	echo "Options description:"
	echo "	start		start KSM by doing \"echo 1 > $KSM_RUN\""
	echo ""
	echo "	stop		stop KSM by doing \"echo 0 > $KSM_RUN\""
	echo "			stop command doesn't clean cached pages."
	echo ""
	echo "	status		show KSM data and info and exit."
	echo ""
	echo "	status -f 	The '-f' option	shows data in continous mode (similar to \`top')"
	echo ""
	echo "	status -s	The '-s' option returns 0 if KSM is running and 2 if not. 1 if error."
	echo "			This option doesn't produce any textual output (for in-script use)"
	echo ""
	echo "	flush		stop KSM by doing \"echo 2 > $KSM_RUN\""
	echo "			flush command remove all cached data!"
	echo ""
	echo "	millisecs m	set to 'm' millisecs the time between scans,"
	echo "			doing \"echo m > $KSM_SLEEP\""
	echo ""
	echo "	scan p		set how many 'p' pages to scan between each"
	echo "			sleep, by doing \"echo p > $KSM_PAGES_TO_SCAN\""
	echo ""
	echo "	help		show this help and exit."
	return 0
}

#############################################################
# Program

required_bins || exit $?
files_exist
if ! has_support
then
	echo "E: This machine has no KSM support." >&2
	exit 1
fi

case "$1" in
	status )
		case "$2" in
			"" )
				status
				exit $?
				;;
			"-f" )
				echo "W: Deprecation warning. The [-f] option will be removed in future versions." >&2
				$WATCH -ct $BASH $THIS status
				exit $?
				;;
			"-s" )
				is_running
				case $? in
					0 )
						exit 2
						;;
					2 )
						exit 2
						;;
					1 )
						exit 0
						;;
				esac
				;;
			* )
				exit 3
				;;
		esac
		;;
	start )
		start
		exit $?
		;;
	stop )
		stop
		exit $?
		;;
	flush )
		flush
		exit $?
		;;
	millisecs )
		millisecs $2
		exit $?
		;;
	scan )
		scan $2
		exit $?
		;;
	help )
		help
		exit $?
		;;
	* )
		use
		exit 3
		;;
esac
exit 3
